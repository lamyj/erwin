#!/usr/bin/env python3

import argparse
import logging
import os
import sys

import subprocess

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def dwi(image, json, output):
    
    # Setting absolute for MRtrix
#    output = set_absolute_path(output) 
#    scheme = set_absolute_path("DWI.scheme")
#    tmp_mif = set_absolute_path("temp.mif")
    scheme = "DWI.scheme"
    tmp_mif = "temp.mif"

    
    subprocess.check_call(["generate_scheme", json, scheme])
    subprocess.check_call(["mrconvert", "-force", "-quiet", "-grad", scheme, image, tmp_mif])
    os.remove(scheme)
    subprocess.check_call(["dwidenoise", "-force", "-quiet", tmp_mif, tmp_mif])
    subprocess.check_call(["dwipreproc", "-force", "-quiet", "-rpe_none", "-pe_dir", "PA", "-eddy_options", "\"--slm=linear\"", tmp_mif, tmp_mif])
#    os.removedirs(os.path.join(os.getcwd(), "dwipreproc-tmp-*"))
    subprocess.check_call(["dwibiascorrect", "-force", "-quiet", "-ants", tmp_mif, output])
    os.remove(tmp_mif)
    

def set_absolute_path(filename):
    if os.path.dirname(filename) == '':
        filename = os.path.join(os.getcwd(), filename)
    return filename
    

if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="")
    
    parser.add_argument("image", help="DWI image")
    parser.add_argument("json", help="DWI json")
    parser.add_argument("output", help="TO BE FILLED") # TO BE FILLED
    parser.add_argument(
        "-v", "--verbose", 
        default = 'warning', choices=["debug", "info", "warning"],
        metavar="LEVEL", help="Logging level (default: warning)")
    args = vars(parser.parse_args())
    
    logging.basicConfig(level=args.pop('verbose').upper())

    try:
        sys.exit(dwi(**args))
    except Exception as e:
        if logging.getLogger().getEffectiveLevel() <= logging.DEBUG:
            raise
        else:
            parser.error(e)
