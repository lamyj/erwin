#!/usr/bin/env python3

import os
import sys
import numpy
import logging
import nibabel
import argparse

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import argument_parsers

def r2star_map(MGE, R2_star_path):
    """ Compute R2* (in 1/s). """

    # NOTE: we expect divide by 0 errors when computing the log in the image
    # background
    numpy.seterr(divide="ignore")

    TE = numpy.divide([x[0] for x in MGE[1]["EchoTime"]], 1e3) # ms -> s
    
    coefficients = numpy.ones((len(TE), 2))
    coefficients[:,1] = -TE
    
    log_MGE = numpy.log(MGE[0].get_data())
    
    # NOTE: lstsq does not broadcast as of numpy 1.15
    log_MGE = log_MGE.reshape((-1, log_MGE.shape[-1]), order="F")
    solution = numpy.apply_along_axis(
        lambda x: numpy.linalg.lstsq(coefficients, x, rcond=-1)[0], 1, log_MGE)
    R2_star = solution[:, 1]
    
    # WARNING: numpy has C-order by default
    R2_star = R2_star.reshape(MGE[0].shape[:-1], order="F")
    nibabel.save(nibabel.Nifti1Image(R2_star, MGE[0].affine), R2_star_path)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Compute the R2* map from a 4D MGE magnitude image.")
    
    parser.add_argument(
        "MGE", type=argument_parsers.image_and_meta_data_type,
        help="Multi gradient echo magnitude image")
    parser.add_argument("R2_star_path", metavar="R2_star", help="R2*")
    parser.add_argument(
            "-v", "--verbose", 
            default = 'WARNING', choices=["DEBUG", "INFO", "WARNING"],
            metavar="LEVEL", help="logging level (default: WARNING)")
    args = vars(parser.parse_args())
    
    logging.basicConfig(level=args.pop('verbose').upper())    
    
    try: 
        sys.exit(r2star_map(**args))
    except Exception as e:
        if logging.getLogger().getEffectiveLevel() <= logging.DEBUG:
            raise
        else:
            parser.error(e)
