#!/usr/bin/env python3

import sys
import numpy
import logging
import nibabel
import argparse

import argument_parsers


def r2star_map(magnitude, mask, GRE, oR2, oT2, oS0):
    """ QSM map """
    
    # Get echo times
    TE = [x[0] for x in GRE[1]["EchoTime"]]

    # R2* mapping  
    r2_star(magnitude, mask, TE, oR2, oT2, oS0)


def r2_star(mag_filename, mask_filename, TE, oR2, oT2, oS0):
    """ Compute S0, T2* and R2*. """
    
    img = nibabel.load(mag_filename)
    comb_mag = img.get_data().astype(numpy.float32)
    
    mask = nibabel.load(mask_filename).get_data().astype(numpy.float32)
    
    T2_star = numpy.zeros(comb_mag[:,:,:,0].shape)
    S0 = numpy.zeros(comb_mag[:,:,:,0].shape)
    
    TE_tmp = numpy.ones((len(TE), 2))
    TE_tmp[:,1] = numpy.squeeze(TE).astype(numpy.float32)
    
    for i in range(0, comb_mag.shape[0]):
        for j in range(0, comb_mag.shape[1]):
            for k in range(0, comb_mag.shape[2]):
                s = comb_mag[i,j,k,:]
                y = numpy.log(s)
                b = numpy.linalg.lstsq(TE_tmp, y, rcond=-1)[0]
                    
                T2_star[i,j,k] = -1/b[1]
                S0[i,j,k] = b[0]
                
    S0 = S0*mask
    S0[T2_star < 0] = numpy.nan # WARNING: S0 does not have to be integer typed
    
    T2_star = T2_star*mask # [ms]
    T2_star[T2_star < 0] = numpy.nan   
    
    R2_star = 1/T2_star*1e3*mask # [s^-1]
        
    oimg = nibabel.Nifti1Image(S0, img.affine)
    nibabel.save(oimg, oS0)
    
    oimg = nibabel.Nifti1Image(T2_star, img.affine)
    nibabel.save(oimg, oT2)
    
    oimg = nibabel.Nifti1Image(R2_star, img.affine)
    nibabel.save(oimg, oR2)
       

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="R2*, T2* and S0 map generation.")
    
    parser.add_argument("magnitude", help="Magnitude 4D combination image")
    parser.add_argument("mask", help="Brain mask image")
    parser.add_argument("GRE", type=argument_parsers.image_and_meta_data_type, 
                        help="Path to one GRE image (magnitude or phase)")
    parser.add_argument("oR2", help="R2* result")
    parser.add_argument("oT2", help="T2* result")
    parser.add_argument("oS0", help="S0 result")
    parser.add_argument(
            "-v", "--verbose", 
            default = 'WARNING', choices=["DEBUG", "INFO", "WARNING"],
            metavar="LEVEL", help="logging level (default: WARNING)")
    args = vars(parser.parse_args())
        
    logging.basicConfig(level=args.pop('verbose').upper())    
        
    try: 
        sys.exit(r2star_map(**args))
    except Exception as e:
        if logging.getLogger().getEffectiveLevel() <= logging.DEBUG:
            raise
        else:
            parser.error(e)