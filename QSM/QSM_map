#!/usr/bin/env python3

import os
import sys
import logging
import argparse
import subprocess

import argument_parsers

VOXEL_SIZE = [1, 1, 1] # [mm]
PAD_SIZE = [24, 24, 24]


def qsm_map(tissue_phase, mask, GRE, H_path, oqsm):
    """ QSM map """
    
    # Get echo times
    TE = [x[0] for x in GRE[1]["EchoTime"]]
    
    # QSM using iLSQR method (from STI_Suite)
    fQSM(tissue_phase, mask, TE, H_path, oqsm)
    
    
def fQSM(tissue_phase_filename, mask_filename, TE, h_path, oqsm):
    """ Compute QSM calculus based on STI Suite algorithm iLSQR. """
        
    tissue_phase_filename = check_gz(tissue_phase_filename, 'input_gz')
    mask_filename = check_gz(mask_filename, 'input_nii_gz')
    oqsm = check_gz(oqsm, 'output')
    
    h_vector = []
    f = open( h_path, "r")  
    for i in range(0,3):
        h_vector.append(f.readline().replace('\n',''))
    f.close() 
    
    subprocess.check_call(["bash", 
                         "{}/call_matlab.sh".format(os.getcwd()),
                         "call_iLSQR",
                         tissue_phase_filename,
                         mask_filename,
                         h_vector[0],
                         h_vector[1],
                         h_vector[2],
                         "{}".format(sum(TE)),
                         "2.89",
                         "{}".format(VOXEL_SIZE[0]),
                         "{}".format(VOXEL_SIZE[1]),
                         "{}".format(VOXEL_SIZE[2]),
                         "200",
                         "0.01",
                         "0.001",
                         "0.1",
                         "{}".format(PAD_SIZE[0]),
                         "{}".format(PAD_SIZE[1]),
                         "{}".format(PAD_SIZE[2]),
                         oqsm
                         ])     

    subprocess.check_call(["gzip", "-f", oqsm])
    subprocess.check_call(["gzip", "-f", tissue_phase_filename])


def check_gz(filename, type):

    if filename.find('gz') is not -1:
        if not os.path.isfile(filename[:-3]) and type is 'input_gz':  
            subprocess.check_call(["gunzip", filename])
        filename = filename[:-3]        

    return filename
    

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="QSM map generation.")
    
    parser.add_argument("tissue_phase", help="Tissue phase estimated")
    parser.add_argument("mask", help="Brain mask image")
    parser.add_argument("GRE", type=argument_parsers.image_and_meta_data_type, 
                        help="Path to one GRE image (magnitude or phase)")
    parser.add_argument("H_path", help="H vector")
    parser.add_argument("oqsm", help="QSM output susceptibility result")
    parser.add_argument(
            "-v", "--verbose", 
            default = 'WARNING', choices=["DEBUG", "INFO", "WARNING"],
            metavar="LEVEL", help="logging level (default: WARNING)")
    args = vars(parser.parse_args())
        
    logging.basicConfig(level=args.pop('verbose').upper())    
        
    try: 
        sys.exit(qsm_map(**args))
    except Exception as e:
        if logging.getLogger().getEffectiveLevel() <= logging.DEBUG:
            raise
        else:
            parser.error(e)